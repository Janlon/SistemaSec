@model SiteSec.Models.Documento

@using (Html.BeginForm())
{

    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <div class="form-group">
            @Html.Label("Nome", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @(Html.Kendo().DropDownListFor(model => model.PessoaId)
                      .DataTextField("Nome")
                      .DataValueField("Id")
                      .OptionLabel("Selecione um item")
                      .HtmlAttributes(new { style = "width:100%;" })
                   .DataSource(source =>
                   {
                       source.Custom()
                           .ServerFiltering(true)
                           .Type("aspnetmvc-ajax")
                           .Transport(transport => { transport.Read("Read", "Pessoa", new { id = ViewBag.PessoaId }); })
                           .Schema(schema => { schema.Data("Data").Total("Total"); });
                   })
                )
                @Html.ValidationMessage("PessoaId", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Tipo de documento", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @(Html.Kendo().DropDownList()
                              .Name("TipoDeDocumentoId")
                              .DataTextField("Descricao")
                              .DataValueField("Id")
                              .OptionLabel("Selecione um item")
                              .Filter("contains")
                              .HtmlAttributes(new { style = "width:100%;" })
                              .DataSource(source =>
                              {
                                  source.Custom()
                                      .ServerFiltering(true)
                                      .Type("aspnetmvc-ajax")
                                      .Transport(transport => { transport.Read("Read", "TipoDocumento"); })
                                      .Schema(schema => { schema.Data("Data").Total("Total"); });
                              })
                )
                @Html.ValidationMessage("TipoDeDocumentoId", "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Numero, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Serie, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Serie, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Serie, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Emissao, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Emissao, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Emissao, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Validade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Validade, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Validade, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
}


